import simplegui
import random
# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False 
outcome = ""
script = ""
score = 0
# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}

class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank
    def __str__(self):
        return self.suit + self.rank
    def get_suit(self):
        return self.suit
    def get_rank(self):
        return self.rank
    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, 
                              [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)

class Hand:
    def __init__(self):
        self.hand = []
    def __str__(self):
        return "Hand contains "  + " ".join(self.hand)             
    def add_card(self, card):
        self.hand.append(card.__str__())        
    def get_value(self):
        hand_value = "".join(self.hand) 
        values_1 = 0
        for n in hand_value:
            if n in VALUES:
                values_1 += VALUES[n]                
        if "A" not in hand_value:
            return values_1
        else:
            #values_11 = values_1 + 10 * hand_value.count("A")
            values_11 = values_1 + 10 
            if values_11 <= 21:
                return values_11
            else:
                return values_1   
    def draw(self, canvas, pos):
        for c in self.hand:
            cd = Card(c[0],c[1])
            cd.draw(canvas, [pos[0]+self.hand.index(c)*90,pos[1]])
            
class Deck:
    def __init__(self):
        self.card_list = []*52
        for suit in SUITS: 
            for rank in RANKS:
                self.card_list.append(Card(suit, rank))                
    def shuffle(self):
        random.shuffle(self.card_list)
    def deal_card(self):
        deal = random.choice(self.card_list)
        self.card_list.remove(deal)
        return deal        
    def __str__(self):
        check = []
        for c in self.card_list:
            check.append(c.__str__())
        return "Deck contains " + " ".join(check)


#define event handlers for buttons
def deal():
    global outcome, script, in_play, deal_cards, dealer, player, score
    if in_play == True:
        score = score - 1
    deal_cards = Deck()
    deal_cards.shuffle()
    dealer = Hand()
    player = Hand()
    dealer.add_card(deal_cards.deal_card())
    dealer.add_card(deal_cards.deal_card())
    player.add_card(deal_cards.deal_card())
    player.add_card(deal_cards.deal_card())
    script = "Hit or Stand ?" 
    outcome = ""
    in_play = True
        
def hit():
    global outcome, script, in_play, deal_cards, player, score
    if in_play == True:
        player.add_card(deal_cards.deal_card())
        if player.get_value() > 21:
            outcome = "You Loss"
            script = "New deal?"
            score = score - 1
            in_play = False
        elif player.get_value() == 21 and dealer.get_value() < 21:
            outcome = "You Win!"
            script = "New deal?"
            score = score + 1
            in_play = False

def stand():
    global outcome, script, in_play, dealer, player, score
    if in_play:
        while dealer.get_value() <= 17:
            dealer.add_card(deal_cards.deal_card())
        if dealer.get_value() > 21:
            outcome = "You Win!"
            script = "New deal?"
            score = score + 1
        else:
            if player.get_value() > dealer.get_value():
                outcome = "You Win!"
                script = "New deal?"
                score = score + 1
            else:
                outcome = "You Loss"
                script = "New deal?"
                score = score - 1
        in_play = False

def new_game():
    global outcome, script, in_play, deal_cards, dealer, player, score
    deal()
    score = 0
        
def draw(canvas):
    canvas.draw_text('Blackjack', (50, 80), 50, 'Yellow')
    canvas.draw_text("score : " + str(score), (350, 80), 30, 'black')
    canvas.draw_text("Dealer", (50, 120), 30, 'black')
    canvas.draw_text("Player", (50, 320), 30, 'black')
    canvas.draw_text(outcome, (150, 120), 30, 'black')
    canvas.draw_text(script, (150, 320), 30, 'black')
    canvas.draw_text(str(player.get_value()), (350, 320), 30, 'black')    
    #canvas.draw_text(str(in_play), (400, 350), 30, 'black')
    
    if in_play == True:
        dealer.draw(canvas, [50, 150])
        player.draw(canvas, [50, 350])
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, 
                      [50+ CARD_BACK_CENTER[0] , 150 + CARD_BACK_CENTER[1]], 
                      CARD_BACK_SIZE)    
    else:
        canvas.draw_text(str(dealer.get_value()), (350, 120), 30, 'black')
        dealer.draw(canvas, [50, 150])
        player.draw(canvas, [50, 350])

frame = simplegui.create_frame("Blackjack", 600, 500)
frame.set_canvas_background("Green")

frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.add_label('')

frame.add_button("New Game", new_game, 200)
frame.add_label('')
frame.add_label('Rules:')
frame.add_label('The dealer wins ties.')
frame.set_draw_handler(draw)

deal()
frame.start()
